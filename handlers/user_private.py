from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f, StateFilter
import requests
import json
import os
import asyncio


from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from translate import Translator
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from FSM import UserSelect

from database.orm_query import orm_add_user, orm_get_user, orm_delete_user
from keyboards import reply
from dotenv import find_dotenv, load_dotenv

load_dotenv(find_dotenv())

API = os.getenv('API')
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
translator = Translator(from_lang='english', to_lang='russian')
user_private_router = Router()


async def get_weather(message: types.Message, city, state: FSMContext):
    res = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API}&units=metric")
    if res.status_code == 200:
        UserSelect.continuation = True
        data = json.loads(res.text)
        weather = translator.translate(data["weather"][0]["main"])
        await message.answer(f'üåÉ–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å: {weather}')
        await asyncio.sleep(2)
        await message.answer(f'üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {data["main"]["temp"]}, –Ω–æ –æ—â—É—â–∞–µ—Ç—Å—èü•∂ –∫–∞–∫ {data["main"]["feels_like"]}')
        await asyncio.sleep(2)
        await message.answer(f'ü™Å–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {data["main"]["pressure"]} –º–º —Ä—Ç')
        await asyncio.sleep(2)
        await message.answer(f'üíß–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ {data["main"]["humidity"]}%')
        await asyncio.sleep(3)
        await message.answer("–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–≥–æ–¥–µüå§, –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å –Ω—É–∂–Ω—ã–π –í–∞–º –≥–æ—Ä–æ–¥üåÜ "
                             "–∏–ª–∏ —Å–∫–∏–Ω—É—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—éüìç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ", reply_markup=reply.start_kb)
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥üòî, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=reply.start_kb)
        await state.clear()
        UserSelect.my_user = None
        UserSelect.continuation = False

@user_private_router.message(or_f(CommandStart(), F.text.lower().contains("–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")))
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üëã –≠—Ç–æ—Ç –±–æ—Çü§ñ –ø–æ–º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞!üåç \n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–æ—Ä–æ–¥üèô", reply_markup=reply.start_kb)
    await state.clear()


@user_private_router.message(or_f(Command("location"), F.text.lower().contains("–≥–µ–æ")))
async def permission_loc(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—Éüìå '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'üìç —á—É—Ç—å –Ω–∏–∂–µüëá",
                         reply_markup=reply.start_kb)
    await state.clear()


@user_private_router.message(or_f(Command("notifications"), F.text.lower().contains("—É–≤–µ–¥–æ–º")))
async def note_cmd(message: types.Message, session: AsyncSession, state: FSMContext):

    if UserSelect.my_user is None:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥üåÜ, –ø–æ–≥–æ–¥—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—Éüïì")
        # UserSelect.my_user = orm_get_user(session, message.from_user.id)
        await state.set_state(UserSelect.city)

    elif UserSelect.my_user == 'cancel_enable':
        await orm_delete_user(session, message.from_user.id)
        scheduler.remove_job('get_weather_job')
        scheduler.shutdown()
        await message.answer("‚ùå–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã‚ùå", reply_markup=reply.start_kb)
        UserSelect.my_user = None
        await state.clear()


@user_private_router.message(UserSelect.city, F.text)
async def mini_server(message: types.Message, session: AsyncSession, state: FSMContext):

    city = message.text.strip()

    try:
        if UserSelect.my_user is None:
            await orm_add_user(message, session)
            UserSelect.my_user = 'cancel_enable'

        await get_weather(message, city, state)

        if UserSelect.continuation:
            scheduler.add_job(get_weather, trigger='interval', minutes=1,
                              kwargs={'message': message, 'city': city, 'state': state}, id='get_weather_job')
            scheduler.start()
            await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ãüîî. –¢–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã‚òÄÔ∏è –≤ –≥–æ—Ä–æ–¥–µ {city} –±—É–¥–µ—Ç "
                                 "–ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤–∞–º —Ä–∞–∑ –≤ <b>1</b> –º–∏–Ω‚è±Ô∏è")
            await asyncio.sleep(1)
            await message.answer("–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîï –Ω–∞–∂–º–∏—Ç–µ "
                                 "/notifications –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' –≤–Ω–∏–∑—Éüëá", reply_markup=reply.start_kb)
            UserSelect.continuation = None
            await state.clear()

    except requests.exceptions.ReadTimeout:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòï, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

    except requests.exceptions.ConnectTimeout:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ωüòï, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


    # scheduler.add_job(exp, trigger='date', run_date=datetime.now() + timedelta(seconds=10),
    #                   kwargs={'message': message})
    # scheduler.add_job(exp, trigger='cron', hour=datetime.now().hour, minute=datetime.now().minute + 1,
    #                   start_date=datetime.now(), kwargs={'message': message})

@user_private_router.message(F.location)
async def get_location(message: types.Message, state: FSMContext):
    lat = str(message.location.latitude)
    lon = str(message.location.longitude)
    res = requests.get(f"https://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=1&appid={API}")
    data = json.loads(res.text)
    city = data[0]["local_names"]["ru"]
    await get_weather(message, city, state)


@user_private_router.message(F.text)
async def today_weather(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await get_weather(message, city, state)


@user_private_router.message()
async def idk(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω—É–∂–Ω—ã–π –í–∞–º –≥–æ—Ä–æ–¥")




